git log --oneline --graph --decorate
git log --since="3 days"
git add -A
rm -rf <filename>               //to recursively force delete
mv <filename> <filename> //to move or rename the file
git log --follow -- level1
git show 87599c3dc75bb9f824306892e676658259d0a606
git ls-files		//shows files being tracked by git
git log --all --graph --decorate --oneline
git config --global alias.hist "log --all --graph --decorate --oneline"
git config --global alias.comm "log --oneline"

---- .gitignore file config ----

to ignore specific file	: MyFile.ext
to ignore file pattern	: *.ext
to ignore a folder	: myfolder/

----************************----

---- merge tool for git ----

git config --global merge.tool p4merge
git config --global mergetool.p4merge.path "<path>.exe"
git config --global mergetool.prompt false

git config --global diff.tool p4merge
git config --global difftool.p4merge.path "<path>.exe"
git config --global difftool.prompt fals

----********************----

git config --global -e

---- Comparison ----

git diff
git difftool HEAD
git diff --staged HEAD
git difftool --staged HEAD
git diff HEAD HEAD^		//compares the last and 2nd last commit
git difftool HEAD HEAD^
git difftool <commit id1> <commit id2>

----********--------

---- Branching ----

git branch -a			//shows all branches
git branch <branch name>	//creates a new branch
git checkout <branch name>	//switches to the mentioned branch
git log --oneline --decorate
git branch -m <branch name> <branch name>	//to move or rename the branch
git branch -d <branch name>	//to delete a branch. Note: cannot the current branch, you need to checkout and then del
git checkout -b <branch name>	//create a new branch and checkout directly
----****----

---- Merge ----
git merge <branch to be merged> --no-ff		//to merge without fast forward
git fetch origin master		//fetches the lastest commits from remote repo shows divergence in commits if any
git pull --rebase origin master	//pull the origin/remote repo commits and merge into local repo before your local commits

----stashing----
git stash			//creates a stash for your work and cleans the local repo
git stash apply			//brings back your stashed work to continue
git stash -u			//to stash working dir including untracked files
git stash pop			//stash apply + stash drop
git stash clear			//clears the entire list of stash
git stash drop stash@{}		//drops the particular stash
git stash apply stash@{}	//applies the particular stash
git stash save <stash name>	//saves multiple stashes
git stash branch <name>		//stash in new branch and drop the stash

----tagging----
git tag <tagname>		//creates a tag for the last commit
git tag --list			//shows all the tags
git show <tagname>		//shows changes made in the tagged commit 
git tag --delete <tagname>	//deletes the particular tag
git tag -a <tag name>		//annoted tag with description
git commit --amend		//rename the committed msg
git difftool <tag1> <tag2>	//trace the difference between two tags
git tag -a <tag> <commitID>	//to tag existing commit
